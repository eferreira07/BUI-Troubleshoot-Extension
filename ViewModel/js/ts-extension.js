define(["require", "exports", "./ts-ticker", "./ts-logger", "./ts-results", "./ts-utilities"], function (require, exports, ts_ticker_1, ts_logger_1, ts_results_1, TsUtilities) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TsExtension = (function () {
        function TsExtension() {
            this.isRunning = false;
            this.warnsIndex = 0;
            var self = this;
            self.initialize();
        }
        TsExtension.prototype.initialize = function () {
            var self = this;
            var startBtn = document.createElement('button');
            var stopBtn = document.createElement('button');
            var timer = document.createElement('time');
            var tsTicker = new ts_ticker_1.TsTicker();
            var tsLogger = new ts_logger_1.TsLogger();
            var osvcTsConfig = "select value from configurations where lookupName = 'CUSTOM_CFG_TS'";
            TsUtilities.myROQLQuery(osvcTsConfig).then(function (result) {
                result["items"].forEach(function (rows) {
                    rows["rows"].forEach(function (value) {
                        var obj = JSON.parse(value);
                        tsLogger.tsDebugLevel = obj.debugLevel;
                        tsLogger.tsPerformance = obj.performance;
                    });
                });
            });
            startBtn.textContent = " Start";
            startBtn.style.color = "green";
            startBtn.className = "btn fa fa-play-circle";
            startBtn.onclick = function () {
                self.isRunning = true;
                startBtn.style.color = "gray";
                startBtn.style.opacity = "0.3";
                startBtn.style.cursor = "not-allowed";
                startBtn.disabled = true;
                stopBtn.style.color = "red";
                stopBtn.style.opacity = "1";
                stopBtn.style.cursor = "pointer";
                stopBtn.disabled = false;
                self.startCapture(self.isRunning, tsTicker, tsLogger);
            };
            stopBtn.textContent = " Stop";
            stopBtn.style.color = "gray";
            stopBtn.style.opacity = "0.3";
            stopBtn.style.cursor = "not-allowed";
            stopBtn.className = "btn fa fa-stop-circle";
            stopBtn.onclick = function () {
                stopBtn.style.color = "gray";
                stopBtn.style.opacity = "0.3";
                stopBtn.style.cursor = "not-allowed";
                stopBtn.disabled = true;
                startBtn.style.color = "green";
                startBtn.style.opacity = "1";
                startBtn.style.cursor = "pointer";
                startBtn.disabled = false;
                self.stopCapture(self.isRunning, tsTicker, tsLogger);
            };
            timer.textContent = "00:00:00";
            timer.className = "time";
            timer.style.cursor = "not-allowed";
            timer.style.padding = "4px";
            timer.style.fontFamily = "auto";
            document.getElementById("startBtn").appendChild(startBtn);
            document.getElementById("stopBtn").appendChild(stopBtn);
            document.getElementById("timer").appendChild(timer);
        };
        TsExtension.prototype.startCapture = function (isRunning, tsTicker, tsLogger) {
            if (isRunning == true) {
                tsTicker.startTimer();
                TsUtilities.getOSvCInterface(tsLogger);
                var osvcQuery = 'select name.first, name.last, displayName, login from accounts where id = ' + tsLogger.osvcUserId;
                TsUtilities.myROQLQuery(osvcQuery).then(function (result) {
                    result["items"].forEach(function (rows) {
                        rows["rows"].forEach(function (value) {
                            tsLogger.setUserInfo(value);
                        });
                    });
                });
                if (tsLogger.tsPerformance) {
                    window.parent.ORACLE_SERVICE_CLOUD.Configuration.isPerformanceMonitoringEnabled = true;
                }
                if (tsLogger.tsDebugLevel > 0) {
                    window.parent.ORACLE_SERVICE_CLOUD.Configuration.logLevel = 5;
                }
                navigator.sayswho = (function () {
                    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                    if (/trident/i.test(M[1])) {
                        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                        return 'IE ' + (tem[1] || '');
                    }
                    if (M[1] === 'Chrome') {
                        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
                        if (tem != null)
                            return tem.slice(1).join(' ').replace('OPR', 'Opera');
                    }
                    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                    if ((tem = ua.match(/version\/(\d+)/i)) != null)
                        M.splice(1, 1, tem[1]);
                    return M.join(' ');
                })();
                tsLogger.tsNavigatorInfo = navigator.sayswho;
                console.defaultLog = console.log.bind(window.parent.console);
                console.logs = [];
                window.parent.console.log = function () {
                    console.defaultLog(console, arguments);
                    var message = "";
                    Array.from(arguments).forEach(function (value) {
                        message = message + '\n' + value;
                    });
                    tsLogger.tsConsoleLog.push({ 'id': tsLogger.tsConsoleLog.length + 1, 'log': message });
                };
                console.defaultError = console.error.bind(window.parent.console);
                console.errors = [];
                window.parent.console.error = function () {
                    console.defaultError.apply(console, arguments);
                    var message = "";
                    Array.from(arguments).forEach(function (value) {
                        message = message + '\n' + value;
                    });
                    tsLogger.tsConsoleError.push({ 'id': tsLogger.tsConsoleError.length + 1, 'log': message });
                };
                console.defaultWarn = console.warn.bind(window.parent.console);
                console.warns = [];
                window.parent.console.warn = function () {
                    console.defaultWarn.apply(console, arguments);
                    var message = "";
                    Array.from(arguments).forEach(function (value) {
                        message = message + '\n' + value;
                    });
                    tsLogger.tsConsoleWarn.push({ 'id': tsLogger.tsConsoleWarn.length + 1, 'log': message });
                };
                console.defaultDebug = console.debug.bind(window.parent.console);
                console.debugs = [];
                window.parent.console.debug = function () {
                    console.defaultDebug.apply(console, arguments);
                    var message = "";
                    Array.from(arguments).forEach(function (value) {
                        message = message + '\n' + value;
                    });
                    tsLogger.tsConsoleDebug.push({ 'id': tsLogger.tsConsoleDebug.length + 1, 'log': message });
                };
            }
        };
        TsExtension.prototype.stopCapture = function (isRunning, tsTicker, tsLogger) {
            if (isRunning == true) {
                isRunning = false;
                window.parent.ORACLE_SERVICE_CLOUD.Configuration.logLevel = 0;
                window.parent.ORACLE_SERVICE_CLOUD.Configuration.isPerformanceMonitoringEnabled = false;
                tsTicker.stopTimer(tsLogger);
                var tsResults = new ts_results_1.TsResults(tsLogger);
                tsResults.saveLocalBlob();
                TsUtilities.MyModalWindow();
                tsLogger.tsConsoleDebug = [];
                tsLogger.tsConsoleWarn = [];
                tsLogger.tsConsoleError = [];
                tsLogger.tsConsoleLog = [];
            }
        };
        return TsExtension;
    }());
    new TsExtension();
});
//# sourceMappingURL=data:application/json;base64,