define(["require", "exports", "./ts-ticker", "./ts-logger", "./ts-results", "./ts-utilities"], function (require, exports, ts_ticker_1, ts_logger_1, ts_results_1, TsUtilities) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TsExtension = (function () {
        function TsExtension() {
            this.isRunning = false;
            this.warnsIndex = 0;
            var self = this;
            self.initialize();
        }
        TsExtension.prototype.initialize = function () {
            var self = this;
            var startBtn = document.createElement('button');
            var stopBtn = document.createElement('button');
            var timer = document.createElement('time');
            var tsTicker = new ts_ticker_1.TsTicker();
            var osvcTsConfig = "select value from configurations where lookupName = 'CUSTOM_CFG_TS'";
            startBtn.textContent = " Start";
            startBtn.style.color = "green";
            startBtn.className = "btn fa fa-play-circle";
            startBtn.onclick = function () {
                var tsLogger = new ts_logger_1.TsLogger();
                TsUtilities.myROQLQuery(osvcTsConfig).then(function (result) {
                    result["items"].forEach(function (rows) {
                        rows["rows"].forEach(function (value) {
                            var obj = JSON.parse(value);
                            tsLogger.tsDebugLevel = obj.debugLevel;
                            tsLogger.tsPerformance = obj.performance;
                            self.isRunning = true;
                            startBtn.style.color = "gray";
                            startBtn.style.opacity = "0.3";
                            startBtn.style.cursor = "not-allowed";
                            startBtn.disabled = true;
                            stopBtn.style.color = "red";
                            stopBtn.style.opacity = "1";
                            stopBtn.style.cursor = "pointer";
                            stopBtn.disabled = false;
                            self.startCapture(self.isRunning, tsTicker, tsLogger);
                            stopBtn.onclick = function () {
                                stopBtn.style.color = "gray";
                                stopBtn.style.opacity = "0.3";
                                stopBtn.style.cursor = "not-allowed";
                                stopBtn.disabled = true;
                                startBtn.style.color = "green";
                                startBtn.style.opacity = "1";
                                startBtn.style.cursor = "pointer";
                                startBtn.disabled = false;
                                self.stopCapture(self.isRunning, tsTicker, tsLogger);
                            };
                        });
                    });
                });
            };
            stopBtn.textContent = " Stop";
            stopBtn.style.color = "gray";
            stopBtn.style.opacity = "0.3";
            stopBtn.style.cursor = "not-allowed";
            stopBtn.className = "btn fa fa-stop-circle";
            timer.textContent = "00:00:00";
            timer.className = "time";
            timer.style.cursor = "not-allowed";
            timer.style.padding = "4px";
            timer.style.fontFamily = "auto";
            document.getElementById("startBtn").appendChild(startBtn);
            document.getElementById("stopBtn").appendChild(stopBtn);
            document.getElementById("timer").appendChild(timer);
        };
        TsExtension.prototype.startCapture = function (isRunning, tsTicker, tsLogger) {
            if (isRunning == true) {
                tsTicker.startTimer();
                TsUtilities.getOSvCInterface(tsLogger);
                var osvcQuery = 'select name.first, name.last, displayName, login from accounts where id = ' + tsLogger.osvcUserId;
                TsUtilities.myROQLQuery(osvcQuery).then(function (result) {
                    result["items"].forEach(function (rows) {
                        rows["rows"].forEach(function (value) {
                            tsLogger.setUserInfo(value);
                        });
                    });
                });
                if (tsLogger.tsPerformance) {
                    window.parent.ORACLE_SERVICE_CLOUD.Configuration.isPerformanceMonitoringEnabled = true;
                }
                if (tsLogger.tsDebugLevel > 0) {
                    window.parent.ORACLE_SERVICE_CLOUD.Configuration.logLevel = tsLogger.tsDebugLevel;
                }
                navigator.sayswho = (function () {
                    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                    if (/trident/i.test(M[1])) {
                        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                        return 'IE ' + (tem[1] || '');
                    }
                    if (M[1] === 'Chrome') {
                        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
                        if (tem != null)
                            return tem.slice(1).join(' ').replace('OPR', 'Opera');
                    }
                    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
                    if ((tem = ua.match(/version\/(\d+)/i)) != null)
                        M.splice(1, 1, tem[1]);
                    return M.join(' ');
                })();
                tsLogger.tsNavigatorInfo = navigator.sayswho;
                console.defaultLog = console.log.bind(window.parent.console);
                console.logs = [];
                window.parent.console.log = function () {
                    console.defaultLog(console, arguments);
                    var logMsg = '';
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i].length > logMsg.length) {
                            logMsg = arguments[i];
                        }
                    }
                    tsLogger.tsConsoleLog.push({ "Id": tsLogger.tsConsoleLog.length + 1, "LogMsg": logMsg });
                };
                console.defaultError = console.error.bind(window.parent.console);
                console.errors = [];
                window.parent.console.error = function () {
                    console.defaultError.apply(console, arguments);
                    var logMsg = '';
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i].length > logMsg.length) {
                            logMsg = arguments[i];
                        }
                    }
                    tsLogger.tsConsoleError.push({ "Id": tsLogger.tsConsoleError.length + 1, "LogMsg": logMsg });
                };
                console.defaultWarn = console.warn.bind(window.parent.console);
                console.warns = [];
                window.parent.console.warn = function () {
                    console.defaultWarn.apply(console, arguments);
                    var logMsg = '';
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i].length > logMsg.length) {
                            logMsg = arguments[i];
                        }
                    }
                    tsLogger.tsConsoleWarn.push({ 'Id': tsLogger.tsConsoleWarn.length + 1, "LogMsg": logMsg });
                };
                console.defaultDebug = console.debug.bind(window.parent.console);
                console.debugs = [];
                window.parent.console.debug = function () {
                    console.defaultDebug.apply(console, arguments);
                    var logMsg = '';
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i].length > logMsg.length) {
                            logMsg = arguments[i];
                        }
                    }
                    tsLogger.tsConsoleDebug.push({ 'Id': tsLogger.tsConsoleDebug.length + 1, "LogMsg": logMsg });
                };
                console.defaultInfo = console.info.bind(window.parent.console);
                window.parent.console.info = function () {
                    console.defaultInfo.apply(console, arguments);
                    var logMsg = '';
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i].length > logMsg.length) {
                            logMsg = arguments[i];
                        }
                    }
                    tsLogger.tsConsoleLog.push({ "Id": tsLogger.tsConsoleLog.length + 1, "LogMsg": logMsg });
                };
            }
        };
        TsExtension.prototype.stopCapture = function (isRunning, tsTicker, tsLogger) {
            if (isRunning == true) {
                isRunning = false;
                window.parent.ORACLE_SERVICE_CLOUD.Configuration.logLevel = 0;
                window.parent.ORACLE_SERVICE_CLOUD.Configuration.isPerformanceMonitoringEnabled = false;
                tsTicker.stopTimer(tsLogger);
                var tsResults = new ts_results_1.TsResults(tsLogger);
                tsResults.saveLocalBlob();
                TsUtilities.MyModalWindow();
            }
        };
        return TsExtension;
    }());
    new TsExtension();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtZXh0ZW5zaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc2NyaXB0cy90cy1leHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBT0E7UUFLSTtZQUhBLGNBQVMsR0FBRyxLQUFLLENBQUM7WUFDbEIsZUFBVSxHQUFXLENBQUMsQ0FBQztZQUduQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxnQ0FBVSxHQUFWO1lBQ0ksSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNDLElBQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsRUFBRSxDQUFDO1lBR2hDLElBQU0sWUFBWSxHQUFHLHFFQUFxRSxDQUFDO1lBSzNGLFFBQVEsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO1lBQ2hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztZQUMvQixRQUFRLENBQUMsU0FBUyxHQUFHLHVCQUF1QixDQUFDO1lBQzdDLFFBQVEsQ0FBQyxPQUFPLEdBQUc7Z0JBRWYsSUFBTSxRQUFRLEdBQUcsSUFBSSxvQkFBUSxFQUFFLENBQUM7Z0JBRWhDLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsTUFBTTtvQkFDdEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLElBQUk7d0JBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxLQUFLOzRC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SSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUU7NEJBQ3ZDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQ3ZCO3FCQUNGO29CQUVELFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztnQkFDMUYsQ0FBQyxDQUFBO2FBRUo7UUFDTCxDQUFDO1FBRUQsaUNBQVcsR0FBWCxVQUFZLFNBQWtCLEVBQUUsUUFBa0IsRUFBRSxRQUFrQjtZQUVsRSxJQUFHLFNBQVMsSUFBSSxJQUFJLEVBQUM7Z0JBRWpCLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBRWxCLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7Z0JBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLDhCQUE4QixHQUFHLEtBQUssQ0FBQztnQkFHeEYsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFHN0IsSUFBTSxTQUFTLEdBQUcsSUFBSSxzQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBRzFCLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUMvQjtRQUNMLENBQUM7UUFFTCxrQkFBQztJQUFELENBQUMsQUFyUEQsSUFxUEM7SUFFRCxJQUFJLFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vb3N2Y0V4dGVuc2lvbi5kLnRzXCIvPlxyXG5cclxuaW1wb3J0IHsgVHNUaWNrZXIgfSBmcm9tIFwiLi90cy10aWNrZXJcIjtcclxuaW1wb3J0IHsgVHNMb2dnZXIgfSBmcm9tIFwiLi90cy1sb2dnZXJcIjtcclxuaW1wb3J0IHsgVHNSZXN1bHRzIH0gZnJvbSBcIi4vdHMtcmVzdWx0c1wiO1xyXG5pbXBvcnQgVHNVdGlsaXRpZXMgPSByZXF1aXJlKCcuL3RzLXV0aWxpdGllcycpO1xyXG5cclxuY2xhc3MgVHNFeHRlbnNpb24ge1xyXG4gICAgXHJcbiAgICBpc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgIHdhcm5zSW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pbml0aWFsaXplKCk7ICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgc3RhcnRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBsZXQgc3RvcEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGxldCB0aW1lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RpbWUnKTsgXHJcbiAgICAgICAgY29uc3QgdHNUaWNrZXIgPSBuZXcgVHNUaWNrZXIoKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgY29uc3Qgb3N2Y1RzQ29uZmlnID0gXCJzZWxlY3QgdmFsdWUgZnJvbSBjb25maWd1cmF0aW9ucyB3aGVyZSBsb29rdXBOYW1lID0gJ0NVU1RPTV9DRkdfVFMnXCI7XHJcbiAgICAgICAgXHJcbiAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gV2hlbiB0aGUgc3RhcnQgYnV0dG9uIGlzIGNsaWNrZWQgaXQgaXMgdHVybmVkIGRpc2JhbGVkIGFuZCBncmF5LiBBdCB0aGlzIHRpbWUgdGhlIHN0b3AgYnV0dG9uIHR1cm5lZCB0byByZWQgYW5kIGFuYWJsZWQuXHJcbiAgICAgICAgc3RhcnRCdG4udGV4dENvbnRlbnQgPSBcIiBTdGFydFwiO1xyXG4gICAgICAgIHN0YXJ0QnRuLnN0eWxlLmNvbG9yID0gXCJncmVlblwiO1xyXG4gICAgICAgIHN0YXJ0QnRuLmNsYXNzTmFtZSA9IFwiYnRuIGZhIGZhLXBsYXktY2lyY2xlXCI7XHJcbiAgICAgICAgc3RhcnRCdG4ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdHNMb2dnZXIgPSBuZXcgVHNMb2dnZXIoKTtcclxuXHJcbiAgICAgICAgICAgIFRzVXRpbGl0aWVzLm15Uk9RTFF1ZXJ5KG9zdmNUc0NvbmZpZykudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W1wiaXRlbXNcIl0uZm9yRWFjaChmdW5jdGlvbihyb3dzKXtcclxuICAgICAgICAgICAgICAgICAgICByb3dzW1wicm93c1wiXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzTG9nZ2VyLnRzRGVidWdMZXZlbCA9IG9iai5kZWJ1Z0xldmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0c0xvZ2dlci50c1BlcmZvcm1hbmNlID0gb2JqLnBlcmZvcm1hbmNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdG4uc3R5bGUuY29sb3IgPSBcImdyYXlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdG4uc3R5bGUub3BhY2l0eSA9IFwiMC4zXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnRuLnN0eWxlLmN1cnNvciA9IFwibm90LWFsbG93ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcEJ0bi5zdHlsZS5jb2xvciA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BCdG4uc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wQnRuLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wQnRuLmRpc2FibGVkID0gZmFsc2U7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHN0YXJ0IHByb2Nlc3MgdG8gY2FwdHVyZSBsb2c7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhcnRDYXB0dXJlKHNlbGYuaXNSdW5uaW5nLCB0c1RpY2tlciwgdHNMb2dnZXIpOyBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BCdG4ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BCdG4uc3R5bGUuY29sb3IgPSBcImdyYXlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BCdG4uc3R5bGUub3BhY2l0eSA9IFwiMC4zXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wQnRuLnN0eWxlLmN1cnNvciA9IFwibm90LWFsbG93ZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEJ0bi5zdHlsZS5jb2xvciA9IFwiZ3JlZW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnRuLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QnRuLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHN0b3AgcHJvY2VzcyB0byBzaG93IGxvZyBjYXB0dXJlIHJlc3VsdHMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0b3BDYXB0dXJlKHNlbGYuaXNSdW5uaW5nLCB0c1RpY2tlciAsdHNMb2dnZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTsgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFdoZW4gdGhlIHN0b3AgYnV0dG9uIGlzIGNsaWNrZWQgaXQgaXMgdHVybmVkIGRpc2JhbGVkIGFuZCBncmF5LiBBdCB0aGlzIHRpbWUgdGhlIHN0YXJ0IGJ1dHRvbiB0dXJuZWQgdG8gZ3JlZW4gYW5kIGFuYWJsZWQuXHJcbiAgICAgICAgc3RvcEJ0bi50ZXh0Q29udGVudCA9IFwiIFN0b3BcIjtcclxuICAgICAgICBzdG9wQnRuLnN0eWxlLmNvbG9yID0gXCJncmF5XCI7XHJcbiAgICAgICAgc3RvcEJ0bi5zdHlsZS5vcGFjaXR5ID0gXCIwLjNcIlxyXG4gICAgICAgIHN0b3BCdG4uc3R5bGUuY3Vyc29yID0gXCJub3QtYWxsb3dlZFwiO1xyXG4gICAgICAgIHN0b3BCdG4uY2xhc3NOYW1lID0gXCJidG4gZmEgZmEtc3RvcC1jaXJjbGVcIjtcclxuXHJcblxyXG4gICAgICAgIHRpbWVyLnRleHRDb250ZW50ID0gXCIwMDowMDowMFwiO1xyXG4gICAgICAgIHRpbWVyLmNsYXNzTmFtZSA9IFwidGltZVwiO1xyXG4gICAgICAgIHRpbWVyLnN0eWxlLmN1cnNvciA9IFwibm90LWFsbG93ZWRcIjtcclxuICAgICAgICB0aW1lci5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcclxuICAgICAgICB0aW1lci5zdHlsZS5mb250RmFtaWx5ID0gXCJhdXRvXCI7XHJcblxyXG4gICAgICAgIC8vRGVmaW5lIFN0YXR1cyBCYXIgSFRNTCBFbGVtZW50cy5cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0QnRuXCIpLmFwcGVuZENoaWxkKHN0YXJ0QnRuKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0b3BCdG5cIikuYXBwZW5kQ2hpbGQoc3RvcEJ0bik7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGltZXJcIikuYXBwZW5kQ2hpbGQodGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBzdGFydENhcHR1cmUoaXNSdW5uaW5nOiBib29sZWFuLCB0c1RpY2tlcjogVHNUaWNrZXIsIHRzTG9nZ2VyOiBUc0xvZ2dlcil7ICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICBpZihpc1J1bm5pbmcgPT0gdHJ1ZSl7XHJcblxyXG4gICAgICAgICAgICAvL1N0YXJ0IHN0b3Atd2F0Y2hlci5cclxuICAgICAgICAgICAgdHNUaWNrZXIuc3RhcnRUaW1lcigpO1xyXG5cclxuICAgICAgICAgICAgVHNVdGlsaXRpZXMuZ2V0T1N2Q0ludGVyZmFjZSh0c0xvZ2dlcik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBvc3ZjUXVlcnkgPSAnc2VsZWN0IG5hbWUuZmlyc3QsIG5hbWUubGFzdCwgZGlzcGxheU5hbWUsIGxvZ2luIGZyb20gYWNjb3VudHMgd2hlcmUgaWQgPSAnKyB0c0xvZ2dlci5vc3ZjVXNlcklkO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBUc1V0aWxpdGllcy5teVJPUUxRdWVyeShvc3ZjUXVlcnkpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIml0ZW1zXCJdLmZvckVhY2goZnVuY3Rpb24ocm93cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93c1tcInJvd3NcIl0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzTG9nZ2VyLnNldFVzZXJJbmZvKHZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYodHNMb2dnZXIudHNQZXJmb3JtYW5jZSkge3dpbmRvdy5wYXJlbnQuT1JBQ0xFX1NFUlZJQ0VfQ0xPVUQuQ29uZmlndXJhdGlvbi5pc1BlcmZvcm1hbmNlTW9uaXRvcmluZ0VuYWJsZWQgPSB0cnVlO31cclxuICAgICAgICAgICAgaWYodHNMb2dnZXIudHNEZWJ1Z0xldmVsID4gMCkge3dpbmRvdy5wYXJlbnQuT1JBQ0xFX1NFUlZJQ0VfQ0xPVUQuQ29uZmlndXJhdGlvbi5sb2dMZXZlbCA9IHRzTG9nZ2VyLnRzRGVidWdMZXZlbDt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2F5c3dobz0gKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdWE9IG5hdmlnYXRvci51c2VyQWdlbnQsIHRlbSwgXHJcbiAgICAgICAgICAgICAgICBNPSB1YS5tYXRjaCgvKG9wZXJhfGNocm9tZXxzYWZhcml8ZmlyZWZveHxtc2llfHRyaWRlbnQoPz1cXC8pKVxcLz9cXHMqKFxcZCspL2kpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYoL3RyaWRlbnQvaS50ZXN0KE1bMV0pKXtcclxuICAgICAgICAgICAgICAgICAgICB0ZW09ICAvXFxicnZbIDpdKyhcXGQrKS9nLmV4ZWModWEpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnSUUgJysodGVtWzFdIHx8ICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKE1bMV09PT0gJ0Nocm9tZScpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbT0gdWEubWF0Y2goL1xcYihPUFJ8RWRnZSlcXC8oXFxkKykvKTtcclxuICAgICAgICAgICAgICAgICAgICBpZih0ZW0hPSBudWxsKSByZXR1cm4gdGVtLnNsaWNlKDEpLmpvaW4oJyAnKS5yZXBsYWNlKCdPUFInLCAnT3BlcmEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIE09IE1bMl0/IFtNWzFdLCBNWzJdXTogW25hdmlnYXRvci5hcHBOYW1lLCBuYXZpZ2F0b3IuYXBwVmVyc2lvbiwgJy0/J107XHJcbiAgICAgICAgICAgICAgICBpZigodGVtPSB1YS5tYXRjaCgvdmVyc2lvblxcLyhcXGQrKS9pKSkhPSBudWxsKSBNLnNwbGljZSgxLCAxLCB0ZW1bMV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE0uam9pbignICcpO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgdHNMb2dnZXIudHNOYXZpZ2F0b3JJbmZvID0gbmF2aWdhdG9yLnNheXN3aG87XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2xvZ1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlZmF1bHRMb2cgPSBjb25zb2xlLmxvZy5iaW5kKHdpbmRvdy5wYXJlbnQuY29uc29sZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9ncyA9IFtdO1xyXG4gICAgICAgICAgICB3aW5kb3cucGFyZW50LmNvbnNvbGUubG9nID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgJiAgY29uc29sZS5sb2coKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWZhdWx0TG9nKGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXcgJiBhcnJheSBkYXRhXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGxvZ01zZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0ubGVuZ3RoID4gbG9nTXNnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ01zZyA9IGFyZ3VtZW50c1tpXTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0c0xvZ2dlci50c0NvbnNvbGVMb2cucHVzaCh7XCJJZFwiOiB0c0xvZ2dlci50c0NvbnNvbGVMb2cubGVuZ3RoICsgMSxcIkxvZ01zZ1wiOiBsb2dNc2d9KTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2Vycm9yXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVmYXVsdEVycm9yID0gY29uc29sZS5lcnJvci5iaW5kKHdpbmRvdy5wYXJlbnQuY29uc29sZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3JzID0gW107XHJcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuY29uc29sZS5lcnJvciA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0ICYgIGNvbnNvbGUuZXJyb3IoKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWZhdWx0RXJyb3IuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIC8vIG5ldyAmIGFycmF5IGRhdGFcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGxvZ01zZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0ubGVuZ3RoID4gbG9nTXNnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ01zZyA9IGFyZ3VtZW50c1tpXTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0c0xvZ2dlci50c0NvbnNvbGVFcnJvci5wdXNoKHtcIklkXCI6IHRzTG9nZ2VyLnRzQ29uc29sZUVycm9yLmxlbmd0aCArIDEsXCJMb2dNc2dcIjogbG9nTXNnfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vd2FyblxyXG4gICAgICAgICAgICBjb25zb2xlLmRlZmF1bHRXYXJuID0gY29uc29sZS53YXJuLmJpbmQod2luZG93LnBhcmVudC5jb25zb2xlKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS53YXJucyA9IFtdOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB3aW5kb3cucGFyZW50LmNvbnNvbGUud2FybiA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0ICYgIGNvbnNvbGUud2FybigpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlZmF1bHRXYXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICAvLyBuZXcgJiBhcnJheSBkYXRhXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxvZ01zZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0ubGVuZ3RoID4gbG9nTXNnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ01zZyA9IGFyZ3VtZW50c1tpXTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0c0xvZ2dlci50c0NvbnNvbGVXYXJuLnB1c2goeydJZCc6IHRzTG9nZ2VyLnRzQ29uc29sZVdhcm4ubGVuZ3RoICsgMSAsXCJMb2dNc2dcIjogbG9nTXNnfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2RlYnVnXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVmYXVsdERlYnVnID0gY29uc29sZS5kZWJ1Zy5iaW5kKHdpbmRvdy5wYXJlbnQuY29uc29sZSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWdzID0gW107XHJcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuY29uc29sZS5kZWJ1ZyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0ICYgIGNvbnNvbGUuZGVidWcoKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWZhdWx0RGVidWcuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIC8vIG5ldyAmIGFycmF5IGRhdGFcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbG9nTXNnID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXS5sZW5ndGggPiBsb2dNc2cubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nTXNnID0gYXJndW1lbnRzW2ldOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRzTG9nZ2VyLnRzQ29uc29sZURlYnVnLnB1c2goeydJZCc6IHRzTG9nZ2VyLnRzQ29uc29sZURlYnVnLmxlbmd0aCArIDEsXCJMb2dNc2dcIjogbG9nTXNnfSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2luZm9cclxuICAgICAgICAgICAgY29uc29sZS5kZWZhdWx0SW5mbyA9IGNvbnNvbGUuaW5mby5iaW5kKHdpbmRvdy5wYXJlbnQuY29uc29sZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuY29uc29sZS5pbmZvID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgJiAgY29uc29sZS5kZWJ1ZygpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlZmF1bHRJbmZvLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBsb2dNc2c6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0ubGVuZ3RoID4gbG9nTXNnLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ01zZyA9IGFyZ3VtZW50c1tpXTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRzTG9nZ2VyLnRzQ29uc29sZUxvZy5wdXNoKHtcIklkXCI6IHRzTG9nZ2VyLnRzQ29uc29sZUxvZy5sZW5ndGggKyAxLFwiTG9nTXNnXCI6IGxvZ01zZ30pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IFxyXG5cclxuICAgICAgICB9ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHN0b3BDYXB0dXJlKGlzUnVubmluZzogYm9vbGVhbiwgdHNUaWNrZXI6IFRzVGlja2VyLCB0c0xvZ2dlcjogVHNMb2dnZXIpe1xyXG5cclxuICAgICAgICBpZihpc1J1bm5pbmcgPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpc1J1bm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuT1JBQ0xFX1NFUlZJQ0VfQ0xPVUQuQ29uZmlndXJhdGlvbi5sb2dMZXZlbCA9IDA7XHJcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQuT1JBQ0xFX1NFUlZJQ0VfQ0xPVUQuQ29uZmlndXJhdGlvbi5pc1BlcmZvcm1hbmNlTW9uaXRvcmluZ0VuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vU3RvcCBzdG9wX3dhdGNoZXJcclxuICAgICAgICAgICAgdHNUaWNrZXIuc3RvcFRpbWVyKHRzTG9nZ2VyKTtcclxuXHJcbiAgICAgICAgICAgIC8vQ3JlYXRlIEhUTUwgdG8gc2hvdyBjYXB0dXJlIHJlc3VsdHMuXHJcbiAgICAgICAgICAgIGNvbnN0IHRzUmVzdWx0cyA9IG5ldyBUc1Jlc3VsdHModHNMb2dnZXIpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0c1Jlc3VsdHMuc2F2ZUxvY2FsQmxvYigpO1xyXG5cclxuICAgICAgICAgICAgLy9PcGVuIFdpbmRvdyBNb2RhbCB0byBwcmVzZW50IHRoZSBkYXRhIGNvbGxlY3Rpb24gcmVzdWx0cy5cclxuICAgICAgICAgICAgVHNVdGlsaXRpZXMuTXlNb2RhbFdpbmRvdygpOyAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxubmV3IFRzRXh0ZW5zaW9uKCk7XHJcbiJdfQ==